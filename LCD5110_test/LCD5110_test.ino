// copy, https://www.e-tinkers.com/2017/11/how-to-use-lcd-5110-pcd-8544-with-arduino/
// 2019-FEB-07, xiaolaba, test ok.
// Arduino IDE 1.8.2
// Arduino UNO used 

#include <SPI.h>;
// Mapping LCD module signals with Arduino pins
// hardware SPI interface used, SCLK & DN must be the pins, not anything else,
// NOKIA 5110 LCD module (red PCB), 8-pin sequency as following,

#define use_define
//#define use_const

#if defined use_define
// hardware setup
#define LED  6    // pin#8, any pin ok, BACKLIGHT+
#define SCLK 13   // SPI CLK, SCLK Must connect to Arduino D13 (SPI CLK) when using SPI library
#define DN   11   // SPI DATA, Must connect to Arduino D11 (SPI MOSI) when using SPI library
#define DC   10   // any pin ok, Data/Command or Register Select (RS)
#define RST  9    // any pin ok, RESET
#define SCE  8    // any pin ok, Select Chip Enable
#define GND  0V   // dummy, no actial uses of code
#define VCC  +3V3 // pin#1, dummy, no actial uses of code

// software setup
#define LCD_WIDTH  84
#define LCD_HEIGHT 48
#define LCD_CMD    LOW  // DC pin = 0
#define LCD_DATA   HIGH // DC pin = 1
#define LED_ON     HIGH // backlight LED pin = 3V
#define LED_OFF    LOW  // backlight LED pin = 0V
#endif


#if defined use_const
// hardware setup
const int LED = 6;
const int SCLK = 13; // Must connect to Arduino D13 (SPI SCLK) when using SPI library
const int DN = 11; // Must connect to Arduino D11 (SPI MOSI) when using SPI library
const int DC = 10;
const int RST = 9;
const int SCE = 8;

// software setup
const int LCD_WIDTH = 84;
const int LCD_HEIGHT = 48;
const int LCD_CMD = LOW;
const int LCD_DATA = HIGH;
const int LED_ON = HIGH;
const int LED_OFF = LOW;
#endif


boolean _inverse = false;
 
unsigned char eTinkersLogo[LCD_HEIGHT * LCD_WIDTH / 8 + 1] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf8, 0xfc, 0xfc, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0xf8, 0x10, 0x10, 0xa0, 0x20, 0x40, 0x40, 0x80, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3f, 0x10, 0x11, 0x09, 0x09, 0x04, 0x04, 0x02, 0x7e, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0,
0x00, 0x01, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x01, 0x00
};
 
void printStr(unsigned char str[]) {
  unsigned int p, i;
  unsigned char b;
  const unsigned char FONT_TABLE [][5] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0x20, space
  { 0x00, 0x00, 0x5f, 0x00, 0x00 }, // 0x21, !
  { 0x00, 0x07, 0x00, 0x07, 0x00 }, // 0x22, "
  { 0x14, 0x7f, 0x14, 0x7f, 0x14 }, // 0x23, #
  { 0x24, 0x2a, 0x7f, 0x2a, 0x12 }, // 0x24, $
  { 0x23, 0x12, 0x08, 0x64, 0x62 }, // 0x25, %
  { 0x36, 0x49, 0x55, 0x22, 0x50 }, // 0x26, &
  { 0x00, 0x05, 0x03, 0x00, 0x00 }, // 0x27, '
  { 0x00, 0x1c, 0x22, 0x41, 0x00 }, // 0x28, (
  { 0x00, 0x41, 0x22, 0x1c, 0x00 }, // 0x29, )
  { 0x14, 0x08, 0x3E, 0x08, 0x14 }, // 0x2a, *
  { 0x08, 0x08, 0x3E, 0x08, 0x08 }, // 0x2b, +
  { 0x00, 0x50, 0x30, 0x00, 0x00 }, // 0x2c, ,
  { 0x08, 0x08, 0x08, 0x08, 0x08 }, // 0x2d, -
  { 0x00, 0x60, 0x60, 0x00, 0x00 }, // 0x2e, .
  { 0x20, 0x10, 0x08, 0x04, 0x02 }, // 0x2f, /
  { 0x3E, 0x51, 0x49, 0x45, 0x3E }, // 0x30, 0
  { 0x00, 0x42, 0x7F, 0x40, 0x00 }, // 0x31, 1
  { 0x42, 0x61, 0x51, 0x49, 0x46 }, // 0x32, 2
  { 0x21, 0x41, 0x45, 0x4B, 0x31 }, // 0x33, 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10 }, // 0x34, 4
  { 0x27, 0x45, 0x45, 0x45, 0x39 }, // 0x35, 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x30 }, // 0x36, 6
  { 0x01, 0x71, 0x09, 0x05, 0x03 }, // 0x37, 7
  { 0x36, 0x49, 0x49, 0x49, 0x36 }, // 0x38, 8
  { 0x06, 0x49, 0x49, 0x29, 0x1E }, // 0x39, 9
  { 0x00, 0x36, 0x36, 0x00, 0x00 }, // 0x3a, :
  { 0x00, 0x56, 0x36, 0x00, 0x00 }, // 0x3b, ;
  { 0x08, 0x14, 0x22, 0x41, 0x00 }, // 0x3c, <
  { 0x14, 0x14, 0x14, 0x14, 0x14 }, // 0x3d, =
  { 0x00, 0x41, 0x22, 0x14, 0x08 }, // 0x3e, >
  { 0x02, 0x01, 0x51, 0x09, 0x06 }, // 0x3f, ?
  { 0x32, 0x49, 0x59, 0x51, 0x3E }, // 0x40, @
  { 0x7E, 0x11, 0x11, 0x11, 0x7E }, // 0x41, A
  { 0x7F, 0x49, 0x49, 0x49, 0x36 }, // 0x42, B
  { 0x3E, 0x41, 0x41, 0x41, 0x22 }, // 0x43, C
  { 0x7F, 0x41, 0x41, 0x22, 0x1C }, // 0x44, D
  { 0x7F, 0x49, 0x49, 0x49, 0x41 }, // 0x45, E
  { 0x7F, 0x09, 0x09, 0x09, 0x01 }, // 0x46, F
  { 0x3E, 0x41, 0x49, 0x49, 0x7A }, // 0x47, G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F }, // 0x48, H
  { 0x00, 0x41, 0x7F, 0x41, 0x00 }, // 0x49, I
  { 0x20, 0x40, 0x41, 0x3F, 0x01 }, // 0x4a, J
  { 0x7F, 0x08, 0x14, 0x22, 0x41 }, // 0x4b, K
  { 0x7F, 0x40, 0x40, 0x40, 0x40 }, // 0x4c, L
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F }, // 0x4d, M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F }, // 0x4e, N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E }, // 0x4f, O
  { 0x7F, 0x09, 0x09, 0x09, 0x06 }, // 0x50, P
  { 0x3E, 0x41, 0x51, 0x21, 0x5E }, // 0x51, Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46 }, // 0x52, R
  { 0x46, 0x49, 0x49, 0x49, 0x31 }, // 0x53, S
  { 0x01, 0x01, 0x7F, 0x01, 0x01 }, // 0x54, T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F }, // 0x55, U
  { 0x1F, 0x20, 0x40, 0x20, 0x1F }, // 0x56, V
  { 0x3F, 0x40, 0x38, 0x40, 0x3F }, // 0x57, W
  { 0x63, 0x14, 0x08, 0x14, 0x63 }, // 0x58, X
  { 0x07, 0x08, 0x70, 0x08, 0x07 }, // 0x59, Y
  { 0x61, 0x51, 0x49, 0x45, 0x43 }, // 0x5a, Z
  { 0x00, 0x7F, 0x41, 0x41, 0x00 }, // 0x5b, [
  { 0x55, 0x2A, 0x55, 0x2A, 0x55 }, // 0x5c, back slash
  { 0x00, 0x41, 0x41, 0x7F, 0x00 }, // 0x5d, ]
  { 0x04, 0x02, 0x01, 0x02, 0x04 }, // 0x5e, ^
  { 0x40, 0x40, 0x40, 0x40, 0x40 }, // 0x5f, _
  { 0x00, 0x01, 0x02, 0x04, 0x00 }, // 0x60, `
  { 0x20, 0x54, 0x54, 0x54, 0x78 }, // 0x61, a
  { 0x7F, 0x48, 0x44, 0x44, 0x38 }, // 0x62, b
  { 0x38, 0x44, 0x44, 0x44, 0x20 }, // 0x63, c
  { 0x38, 0x44, 0x44, 0x48, 0x7F }, // 0x64, d
  { 0x38, 0x54, 0x54, 0x54, 0x18 }, // 0x65, e
  { 0x08, 0x7E, 0x09, 0x01, 0x02 }, // 0x66, f
  { 0x0C, 0x52, 0x52, 0x52, 0x3E }, // 0x67, g
  { 0x7F, 0x08, 0x04, 0x04, 0x78 }, // 0x68, h
  { 0x00, 0x44, 0x7D, 0x40, 0x00 }, // 0x69, i
  { 0x20, 0x40, 0x44, 0x3D, 0x00 }, // 0x6a, j
  { 0x7F, 0x10, 0x28, 0x44, 0x00 }, // 0x6b, k
  { 0x00, 0x41, 0x7F, 0x40, 0x00 }, // 0x6c, l
  { 0x7C, 0x04, 0x18, 0x04, 0x78 }, // 0x6d, m
  { 0x7C, 0x08, 0x04, 0x04, 0x78 }, // 0x6e, n
  { 0x38, 0x44, 0x44, 0x44, 0x38 }, // 0x6f, o
  { 0x7C, 0x14, 0x14, 0x14, 0x08 }, // 0x70, p
  { 0x08, 0x14, 0x14, 0x18, 0x7C }, // 0x71, q
  { 0x7C, 0x08, 0x04, 0x04, 0x08 }, // 0x72, r
  { 0x48, 0x54, 0x54, 0x54, 0x20 }, // 0x73, s
  { 0x04, 0x3F, 0x44, 0x40, 0x20 }, // 0x74, t
  { 0x3C, 0x40, 0x40, 0x20, 0x7C }, // 0x75, u
  { 0x1C, 0x20, 0x40, 0x20, 0x1C }, // 0x76, v
  { 0x3C, 0x40, 0x30, 0x40, 0x3C }, // 0x77, w
  { 0x44, 0x28, 0x10, 0x28, 0x44 }, // 0x78, x
  { 0x0C, 0x50, 0x50, 0x50, 0x3C }, // 0x79, y
  { 0x44, 0x64, 0x54, 0x4C, 0x44 }, // 0x7a, z
  { 0x00, 0x08, 0x36, 0x41, 0x00 }, // 0x7b, {
  { 0x00, 0x00, 0x7f, 0x00, 0x00 }, // 0x7c, |
  { 0x00, 0x41, 0x36, 0x08, 0x00 }, // 0x7d, }
  { 0x10, 0x08, 0x08, 0x10, 0x08 }, // 0x7e, ~
  { 0x78, 0x46, 0x41, 0x46, 0x78 } // 0x7f, DEL
  };

  p = 0;
  while (str[p]!='\0') {
    if ( (str[p] >= 0x20) & (str[p] <= 0x7f) ) {
      for (i = 0; i < 5; i++) {
      b = FONT_TABLE[str[p] - 32][i];
      write(LCD_DATA, b);
      }
      write(LCD_DATA, 0x00);
    }
    p++;
  }
}
 
void printImage(unsigned char image[]) {
  unsigned int i;
  cursor(1,1);
  for (i = 0; i < (LCD_WIDTH * LCD_HEIGHT / 8); i++) {
    write(LCD_DATA, image[i]);
  }
}
 
void inverse(boolean inv) {
  _inverse = inv;
}
 
void backlight(boolean state) {
  digitalWrite(LED, state);
}
 
void cursor(unsigned char row, unsigned char col) {
  if ( (row < 1 | row > LCD_HEIGHT / 8) | (col < 1 | col > LCD_WIDTH / 6)) {
    return;
  }
  write(LCD_CMD, 0x40 | ( row - 1) );
  write(LCD_CMD, 0x80 | ( col - 1)*6 );
}
 
void clear(void) {
  int pixel;
  cursor(0,0);
  for (pixel=(LCD_WIDTH * LCD_HEIGHT / 8); pixel > 0; pixel--) {
    write(LCD_DATA, 0x00);
  }
}
 
void write(unsigned int mode, unsigned char data) {
  digitalWrite(SCE, LOW);
  digitalWrite(DC, mode); //HIGH = Data mode, LOW = Command mode
  if (mode == HIGH & _inverse == true) {
    data = ~ data;
  }
  SPI.transfer(data);
  digitalWrite(SCE, HIGH);
}
 
void setup() {
  pinMode(SCLK, OUTPUT);
  pinMode(DN, OUTPUT);
  pinMode(DC, OUTPUT);
  pinMode(SCE, OUTPUT);
  pinMode(RST, OUTPUT);
  pinMode(LED, OUTPUT);
   
  SPI.begin();
  SPI.setDataMode(SPI_MODE0);
  SPI.setBitOrder(MSBFIRST);
 
  digitalWrite(RST, HIGH);
  digitalWrite(SCE, HIGH);
  write(LCD_CMD, 0x21); // Set Extended Command set
  write(LCD_CMD, 0xb2); // Set Vlcd to 6v (LCD Contrast)
  write(LCD_CMD, 0x13); // Set voltage bias system 1:48 (Viewing Angle)
  write(LCD_CMD, 0x20); // Set Normal Command set
  clear(); // Clear all display memory and set cursor to 1,1
  write(LCD_CMD, 0x09); // Set all pixels ON
  write(LCD_CMD, 0x0c); // Set display mode to Normal
   
  backlight(LED_OFF);
}
 
void loop(){
  cursor(0, 1);
  printStr("xiaolaba test");
  cursor(2, 1);
  printStr(" Hello World! ");
  cursor(4, 2);
  printStr("e-tinkers.com");
  inverse(true);
  cursor(6,1);
  printStr("** Nov 2017 **");
  inverse(false);
  delay(5000);
 
  backlight(LED_ON);
  printImage(eTinkersLogo);
  delay(5000);
  backlight(LED_OFF);
  clear();
}
